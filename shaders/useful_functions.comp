/*
http://docs.gl/sl4/
https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)
https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)
https://khronos.org/registry/OpenGL/index_gl.php
 */
#line 1 2

// For 64 bit ints:
//#extension GL_AMD_gpu_shader_int64: require
//#extension GL_ARB_gpu_shader_int64: enable
//#extension ARB_gpu_shader5: enable
//int64_t i; uint64_t i2; i64vec2 i3; u64vec3 i4;

// For 16 bit ints:
// Note: Not supported on RX 470
//#extension GL_AMD_gpu_shader_int16 : enable

// For half floats:
//#extension GL_AMD_gpu_shader_half_float: enable
//#extension GL_AMD_gpu_shader_half_float2: enable
//SPV_AMD_gpu_shader_half_float
//#ifdef NV_half_float
//#extension NV_half_float: enable
//#endif
//float16_t h; f16vec3 h2; f16mat4x4 h3;

// For doubles:
//#extension GL_ARB_gpu_shader_fp64: enable
//double d;

#line 1

#define UINT_MAX (0xffffffffu)

#define FLT_MAX (3.402823466e+38F)
#define FLT_MIN (1.175494351e-38F)
#define FLT_INF (1.0f/0.0f)
#define FLT_EPSILON (1.192092896e-07F)


// Note that the GETBYTE functions won't work if the GPU is big endian

/**
 * Gets a (possibly unaligned) byte from an int array.
 */
// #define GETBYTE(array,byteIndex) \
//     (((array[(byteIndex) >> 2]) >> (((byteIndex) & 3u) << 3)) & 0xffu)

/**
 * Gets 2 (possibly unaligned) bytes from an int array.
 */
// #define GET2BYTES(array,byteIndex) \
//     (GETBYTE(array,byteIndex) | (GETBYTE(array,(byteIndex)+1)<<8))

 /**
 * Gets 3 (possibly unaligned) bytes from an int array.
 */
// #define GET3BYTES(array,byteIndex) \
// 	(GETBYTE(array,(byteIndex)) |\
//     (GETBYTE(array,(byteIndex)+1)<<8) |\
//     (GETBYTE(array,(byteIndex)+2)<<16))

/// get a vec3 from a float buffer. index is assumed to point to the first float
// #define GETVEC3(array,index) \
// 	vec3(array[index], array[(index)+1], array[(index)+2]);

/**
 *	Gets a ushort from array at specified word index.
 *	Assumes array is a uint[].
 */ 
// #define GETUSHORT(array,wordIndex) \
// 	((array[wordIndex>>1]>>((wordIndex&1)*16)) & 0xffffu)

	// GL_AMD_gcn_shader
//uint64_t timeAMD(void);

// void synchronize() {
// 	// Ensure that memory accesses to shared variables complete.
// 	memoryBarrierShared();
// 	// Every thread in work group must reach this barrier before any other thread can continue.
// 	barrier();
// }

// float random(vec2 co) {
// 	float a  = 12.9898;
// 	float b  = 78.233;
// 	float c  = 43758.5453;
// 	float dt = dot(co.xy, vec2(a,b));
// 	float sn = mod(dt, 3.14);
// 	return fract(sin(sn) * c);
// }
// float random(ivec2 v) {
// 	return random(vec2(v));
// }
// float random2(vec2 co){
//     return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
// }
// vec3 randomvec3(vec2 co) {
// 	return vec3(random(co),random(co+13),random(co+17));
// }

// Pack floats into an int:
// uint a = packUnorm4x8(vec4(1,1,1,1))
// assert a==0xffffffff
// vec4 b = unpackUnorm4x8(a)
// assert vec4==vec4(1,1,1,1)

// To pack larger values (i haven't tested this):
// (Obviously accuracy may be lost)
// uint a = packUnorm4x8(vec4(10,20,30,40)/255)
// vec4 b = unpackUnorm4x8(a)*255

// To convert 4 ubytes to vector:
// vec4 a = unpackUnorm4x8(0x10a0ff03)
// vec3 a = unpackUnorm4x8(0x10a0ff03).wzx	// with swizzle
