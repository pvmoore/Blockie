#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

#include "_header.inc"

layout(set = 0, binding = 2, std430) readonly buffer I0 {
	MarchOut dataIn[];
};

//layout(set = 0, binding = 0, rgba32f) uniform readonly image2D imageIn;

layout(set = 0, binding = 4, rgba8) uniform writeonly image2D imageOut;

layout(set = 0, binding = 5) uniform sampler2D SAMPLER0;

layout(set = 0, binding = 6) uniform samplerCube SAMPLER1;

//layout(set = 0, binding = 7, rgba8) uniform readonly image2D material0;

#include "_ubo.inc"

ivec2 pixel  = ivec2(gl_GlobalInvocationID.xy);
//ivec2 l_pos  = ivec2(gl_LocalInvocationID.xy);
uint g_index = gl_GlobalInvocationID.x +
               gl_GlobalInvocationID.y * ubo_SIZE.x;
//uint l_index = gl_LocalInvocationIndex;

#include "useful_functions.comp"
//#include "perlin_noise.comp"
#include "simplex_noise_3d.comp"
#include "_camera.inc"
#include "pass3_shade_common.inc"

#line 1
#define V_EARTH1 (10)
#define V_ROCK1 (11)
#define V_GRASS1 (12)

// FIXME - This would probably be faster if it was in a storage buffer
const vec3 uint_to_pixel[] = vec3[](
    // volumetric
	vec3(0,0, 0.25),	 // [0] V_AIR (space)
	vec3(0.156863,0.290196,0.341176),         // [1] water
    vec3(0.7,0.7,0.7),   // [2] smoke
    // reserved
    vec3(0,0,0),         // [3] reserved
    vec3(0,0,0),         // [4] reserved
    vec3(0,0,0),         // [5] reserved
    vec3(0,0,0),         // [6] reserved
    vec3(0,0,0),         // [7] reserved
    vec3(0,0,0),         // [8] reserved
    vec3(0,0,0),         // [9] reserved

    // single voxels
    vec3(0.5059, 0.3686, 0.2627)*0.7,	// [10] V_EARTH1
    vec3(0.352, 0.367, 0.363),          // [11] V_ROCK1
    vec3(0.2, 0.7,  0.2),	            // [12] V_GRASS1
    vec3(1.0, 1.0,  1.0),               // [13] V_SNOW
    vec3(1.0, 0.8,  0.5)                // [14] V_SAND
);

vec3 getDiffuse(uint voxel) {
    return uint_to_pixel[voxel];
}

vec3 getDiffuseColour(uint voxel) {
    return getDiffuse(voxel);
}
//vec4 getDiffuseColour(const vec3 hitPos, const uint voxel) {
//    const vec3 lightPos = SUN_POS;
//    const vec3 normal   = calculateNormal();
//    const vec3 toLight  = normalize(lightPos-hitPos);
//
//    const float NdotL      = dot(normal, toLight);
//    const float brightness = max(NdotL, 0);
//
//    vec3 pixel = getDiffuse(voxel);
//
//    return vec4((pixel*0.70f) + (pixel*0.30f * brightness), 1);
//}
void main() {
    uint voxelInfo = dataIn[g_index].voxel;
    //uint voxelSize = (voxelInfo>>8)&0xffu;
    uint voxel     = voxelInfo&0xffu;

    if(voxel==0) {
        // Skybox
        Ray ray = generateRay();
        vec4 skybox = texture(SAMPLER1, ray.direction);
        imageStore(imageOut, pixel, skybox);
        return;
    }

    float dist  = dataIn[g_index].distance;
    vec3 hitPos = getHitPos(pixel);
    vec3 normal = calculateNormal(hitPos);

    vec3 diffuse = getDiffuseColour(voxel);

    if(true) {//} || voxel==V_ROCK1 || voxel==V_GRASS1 || voxel==V_EARTH1) {
        vec4 t  = texture(SAMPLER0, (hitPos.xz+hitPos.y)/100);
        diffuse.xyz = diffuse.xyz*0.25 + t.xyz;
    }

    // diffuse lighting
    diffuse = mix(diffuse*0.25, diffuse, getBrightness(hitPos, normal));

    // noise
    diffuse += clamp(40/(dist+0.1), 0.0, 0.2)*snoise(hitPos*5);

    #define FOG 1
    #if FOG
    vec3 rayDir = normalize(hitPos-ubo_CAMERA_POS);
    vec3 sunDir = normalize(ubo_SUN_POS-ubo_CAMERA_POS);
    //const vec4 colour = vec4(applyFog(diffuse.rgb, dist), diffuse.a);
    //const vec4 colour = vec4(applyFogWithSunScattering(diffuse.rgb, dist, rayDir, sunDir), diffuse.a);
    const vec4 colour = vec4(applyGroundFog(diffuse.rgb, dist, ubo_CAMERA_POS, rayDir), 1);
    #else
    // blend diffuse and sky based on distance from camera
    float fade = clamp(exp(8*(dist/15000)) / 120, 0.0, 1.0);
    vec3 sky   = vec3(0.345098,0.466667,0.560784);
    const vec4 colour = vec4(mix(diffuse.rgb, sky, fade), 1);
    #endif

    imageStore(imageOut, pixel, colour);
}
