#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#ifdef VULKAN
    #extension GL_GOOGLE_include_directive : require
#else
    #extension GL_KHR_vulkan_glsl : enable
#endif
/*
    Set by program:

    CHUNK_SIZE          1024
    CHUNK_SIZE_SHR      10
    OctreeTwigSize      12
    OctreeLeafSize      8
    DFIELD_OFFSET       5148
*/

layout(local_size_x = 8, local_size_y = 8) in;

#include "_header.inc"

#define CELL_SIZE (CHUNK_SIZE>>5)  // 32

layout(set = 0, binding = 0, std430) readonly buffer I0 {
    // voxel data in ubytes
	uint voxelsIn[];
};
layout(set = 0, binding = 1, std430) readonly buffer I1 {
    // chunk data in uints
	uint chunkDataIn[];
};
layout(set = 0, binding = 2, std430) writeonly buffer O0 {
	MarchOut dataOut[];
};
//layout(set = 0, binding = 2, rgba32f) uniform writeonly image2D imageOut;

//layout(set = 1, binding = 0, std430) writeonly buffer O0 {
//	uint debugOut[];
//};

#include "_ubo.inc"

// ==============================================  printf start
layout(set = 1, binding = 0, std430) writeonly buffer PRINTF_BUFFER {
	float buf[];
} printf;
layout(set = 1, binding = 1, std430) buffer PRINTF_STATS {
	uint buf[];
} printf_stats;
#include "_printf.inc"
// ============================================== printf end

ivec2 pixel     = ivec2(gl_GlobalInvocationID.xy);
uint g_index    = gl_GlobalInvocationID.x +
                  gl_GlobalInvocationID.y * ubo_SIZE.x;
vec3 CHUNKS_MUL = vec3(1, ubo_WORLD_CHUNKS_XYZ.x, ubo_WORLD_CHUNKS_XYZ.x * ubo_WORLD_CHUNKS_XYZ.y);

struct Flags {
    uint a;
    uint b;
};

#define CHUNK_FLAG(f)       (f.a & 0xffu)
#define CHUNK_DISTANCE_X(f) (f.a >> 16)
#define CHUNK_DISTANCE_Y(f) (f.b & 0xffffu)
#define CHUNK_DISTANCE_Z(f) (f.b >> 16)

#define CELL_DISTANCES      (chunkVoxels + 1026)
#define CELL_OFFSETS        (chunkVoxels + 1026)


#include "useful_functions.comp"
#include "pass1_march_common.inc"
#include "marchM6.inc"
#include "_camera.inc"

#line 1

bool isAirChunk(Flags flags) {
    return CHUNK_FLAG(flags)==0;
}
uvec3 getChunkDistanceField(Flags f) {
    return uvec3(CHUNK_DISTANCE_X(f),
                 CHUNK_DISTANCE_Y(f),
                 CHUNK_DISTANCE_Z(f));
}
bool isAirCell(uint voxels, uint cell) {
    // [8]: uint[1024] cellFlags
    const uint CELL_FLAGS = voxels+2;

    uint i = cell >> 5;
    uint r = cell & 31u;
    return 0 == (voxelsIn[CELL_FLAGS + i] & (1u<<r));
}
uvec3 getCellDistanceField(uint chunkVoxels, uint cell) {
    // 8+4096 (1026):
    //Distance3[] cellDistances;

    uint b = get3Bytes(CELL_DISTANCES, cell);
    return uvec3(b & 0xffu, (b>>8) & 0xffu, (b>>16) & 0xffu);
}

Voxel march(Ray ray, inout Position pos) {
    Voxel voxel      = Voxel(0,0,0,0);
    float distance   = 0;
    uint chunkVoxels = chunkDataIn[pos.chunk] / 4;
    Flags flags      = Flags(voxelsIn[chunkVoxels], voxelsIn[chunkVoxels+1]);

    // Assume:
    //      1) pos.chunk will always start with a valid chunk

    while(true) {
        float dist;

        if(isAirChunk(flags)) {
            dist = getMinDistToEdge8BitsBiDirectional(ray, pos, getChunkDistanceField(flags), CHUNK_SIZE);
        } else {

            // Are we inside an air cell?
            uint cell = getOctet_1111100000(pos.upos);

            if(isAirCell(chunkVoxels, cell)) {
                // We are inside an air cell. Use the cell distance

                uvec3 cellDistances = getCellDistanceField(chunkVoxels, cell);
                dist = getMinDistToEdge4BitsBiDirectional(ray, pos, cellDistances, CELL_SIZE);

            } else {
                // we are inside a mixed cell. March the cell

                dist = marchCell(ray, pos, voxel, chunkVoxels, cell, distance);
            }
        }

        skipLOD(distance, dist);

        distance += dist;

        if(voxel.value != 0) {
            // We have hit something
            break;
        }

        bool chunkChanged = updatePosition(pos, ray.direction*dist);

        if(chunkChanged) {
            if(pos.chunk==-1) {
                /// We ran out of scenery
                voxel.value = 0;
                break;
            }
            chunkVoxels = chunkDataIn[pos.chunk] / 4;
            flags       = Flags(voxelsIn[chunkVoxels], voxelsIn[chunkVoxels+1]);
        }
	}

	voxel.distance = distance;
	return voxel;
}

void main() {
    Ray ray      = generateRay();
    Position pos = Position(uvec3(0), ray.start, -1);
    updatePosition(pos, vec3(0));

    Voxel voxel = march(ray, pos);

    dataOut[g_index] = MarchOut(voxel.distance, voxel.value);
}
