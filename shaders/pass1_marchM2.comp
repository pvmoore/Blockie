#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#ifdef VULKAN
    #extension GL_GOOGLE_include_directive : require
#else
    #extension GL_KHR_vulkan_glsl : enable
#endif
/*
    Set by program:

    CHUNK_SIZE          1024
    CHUNK_SIZE_SHR      10
    OctreeTwigSize      12
    OctreeLeafSize      8
    DFIELD_OFFSET       5148
*/

layout(local_size_x = 8, local_size_y = 8) in;

#include "_header.inc"

#define CELL_SIZE (CHUNK_SIZE>>4)  // 64

layout(set = 0, binding = 0, std430) readonly buffer I0 {
    // voxel data in ubytes
	uint voxelsIn[];
};
layout(set = 0, binding = 1, std430) readonly buffer I1 {
    // chunk data in uints
	uint chunkDataIn[];
};
layout(set = 0, binding = 2, std430) writeonly buffer O0 {
	MarchOut dataOut[];
};
//layout(set = 0, binding = 2, rgba32f) uniform writeonly image2D imageOut;

//layout(set = 1, binding = 0, std430) writeonly buffer O0 {
//	uint debugOut[];
//};

#include "_ubo.inc"

ivec2 pixel     = ivec2(gl_GlobalInvocationID.xy);
uint g_index    = gl_GlobalInvocationID.x +
                  gl_GlobalInvocationID.y * ubo_SIZE.x;
vec3 CHUNKS_MUL = vec3(1, ubo_WORLD_CHUNKS_XYZ.x, ubo_WORLD_CHUNKS_XYZ.x * ubo_WORLD_CHUNKS_XYZ.y);

struct Flags {
    uint a;
    uint b;
};
#define CHUNK_FLAG(f)       (f.a & 0xffu)
#define CHUNK_DISTANCE_X(f) (f.a >> 16)
#define CHUNK_DISTANCE_Y(f) (f.b & 0xffffu)
#define CHUNK_DISTANCE_Z(f) (f.b >> 16)

#include "useful_functions.comp"
#include "pass1_march_common.inc"
#include "marchM2.inc"
#include "_camera.inc"

#line 1

bool isAirChunk(Flags flags) {
    return CHUNK_FLAG(flags)==0;
}
uvec3 getChunkDistanceField(Flags f) {
    return uvec3(CHUNK_DISTANCE_X(f),
                 CHUNK_DISTANCE_Y(f),
                 CHUNK_DISTANCE_Z(f));
}
/// Unpacks x,y,z from 2nd,3rd and 4th ubyte of _val_
uvec3 getCellDistanceField(uint val) {
    return uvec3(unpackUnorm4x8(val).yzw * 255);
}
/// Estimate surface normal of hit position
/// 0 =  1, 0, 0
/// 1 = -1, 0, 0
/// 2 =  0, 1, 0
/// 3 =  0,-1, 0
/// 4 =  0, 0, 1
/// 5 =  0, 0,-1
//uint getEstimatedNormal(vec3 hitPos, float voxelSize) {
//    vec3 p   = hitPos- ubo_WORLD_BB_MIN;
//    vec3 rem = mod(p, voxelSize);
//    vec3 dir = rem-(voxelSize/2);
//
//    vec3 a = abs(dir);
//
//    uint b = a.x>=a.y && a.x>=a.z ? (0 + (dir.x<0 ? 1 : 0)) :
//             a.y>=a.z ?             (2 + (dir.y<0 ? 1 : 0)) :
//                                    (4 + (dir.z<0 ? 1 : 0));
//    return b;
//}
void clampPositionToVoxelEntryPoint(Ray ray, Position pos, uint voxelSize, inout float distance) {

    vec3 dir    = -ray.direction;
    vec3 invDir = -ray.invDirection;

    vec3 p    = pos.fpos- ubo_WORLD_BB_MIN;
    vec3 rem  = mod(p, voxelSize);
    vec3 size = vec3(greaterThanEqual(dir, vec3(0))) * voxelSize;
    vec3 dist = size-rem;

    vec3 m    = dist * invDir;
    float res = min(m.x, min(m.y, m.z));
    float f   = max(res, 0);

    distance -= f;

    //updatePosition(pos, dir*f);
}

Voxel march(Ray ray, inout Position pos) {
    Voxel voxel    = Voxel(0,0,0,0);
    float distance = 0;
    uint voxels    = chunkDataIn[pos.chunk] / 4;
    Flags flags    = Flags(voxelsIn[voxels], voxelsIn[voxels+1]);

    // Assume:
    //      1) pos.chunk will always start with a valid chunk

    while(true) {
        float dist;

        if(isAirChunk(flags)) {
            dist = getMinDistToEdge8BitsBiDirectional(ray, pos, getChunkDistanceField(flags), CHUNK_SIZE);
        } else {

            if(!getAirVoxel(pos, voxel, distance, voxels)) {
                /// We have hit something

                //if(RENDER_OPTS[0]) {
                //    clampPositionToVoxelEntryPoint(ray, pos, voxel.size, distance);
                //}

                //voxel.normal = getEstimatedNormal(pos.fpos, voxel.size);
                break;
            }

            /// We are inside an air voxel of some size

            bool isCell = (voxel.size == CELL_SIZE);

            if(isCell) {
                uint cell       = voxelsIn[voxels + 2 + voxel.oct];
                uvec3 distances = getCellDistanceField(cell);
                dist = getMinDistToEdge4BitsBiDirectional(ray, pos, distances, CELL_SIZE);
            } else {
                dist = getMinDistToEdge(ray, pos, voxel.size);
            }
        }

        skipLOD(distance, dist);

        distance += dist;

        bool chunkChanged = updatePosition(pos, ray.direction*dist);

        if(chunkChanged) {
            if(pos.chunk==-1) {
                /// We ran out of scenery
                voxel.value=0;
                break;
            }
            voxels = chunkDataIn[pos.chunk] / 4;
            flags  = Flags(voxelsIn[voxels], voxelsIn[voxels+1]);
        }
	}

	voxel.distance = distance;
	return voxel;
}

void main() {
    Ray ray      = generateRay();
    Position pos = Position(uvec3(0), ray.start, -1);
    updatePosition(pos, vec3(0));

    Voxel voxel = march(ray, pos);

    dataOut[g_index] = MarchOut(voxel.distance, //(voxel.normal<<16) + (voxel.size<<8) +
                                voxel.value);
}
