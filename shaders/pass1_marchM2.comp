#version 430 core

/*
    Set by program:
*/

#define GROUP_SIZE_X 8
#define GROUP_SIZE_Y 8
layout(local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;

#include "header.inc"

layout(binding = 0, std430) readonly buffer I0 {
    // voxel data in ubytes
	uint voxelsIn[];
};
layout(binding = 1, std430) readonly buffer I1 {
    // chunk data in uints
	uint chunkDataIn[];
};
layout(binding = 2, std430) writeonly buffer O0 {
	MarchOut dataOut[];
};
//layout(binding = 2, rgba32f)
//uniform writeonly image2D imageOut;

layout(binding = 3, std430) writeonly buffer O1 {
	float debugOut[];
};
//=======================================================================================

uniform ivec2 SIZE;             // Render window size
uniform uvec3 WORLD_CHUNKS_XYZ; // (25, 8, 25)
uniform vec3  WORLD_BB[2];      // world bounding box in worldcoords

uniform vec3  CAMERA_POS;       // in worldcoords
uniform vec3  SCREEN_MIDDLE;    // for calculating Ray
uniform vec3  SCREEN_XDELTA;    // for calculating Ray
uniform vec3  SCREEN_YDELTA;    // for calculating Ray

uniform bool RENDER_OPTS[2];

//uniform mat4 VIEW;
//uniform mat4 INVVIEW;
//uniform float TANFOV2;
//=======================================================================================
//
//vec2 ASPECT_RATIO = SIZE / SIZE.y;

ivec2 pixel     = ivec2(gl_GlobalInvocationID.xy);
uint g_index    = gl_GlobalInvocationID.x +
                  gl_GlobalInvocationID.y*SIZE.x;
vec3 CHUNKS_MUL = vec3(1, WORLD_CHUNKS_XYZ.x, WORLD_CHUNKS_XYZ.x * WORLD_CHUNKS_XYZ.y);

#include "useful_functions.comp"
#include "marchM2.inc"
#include "camera.inc"

#line 1

/// Return true if chunk changes
bool updatePosition(inout Position pos, vec3 add) {
    pos.fpos += add;
    pos.upos  = ivec3(floor(pos.fpos-WORLD_BB[0]));

    uvec3 xyz = pos.upos >> CHUNK_SIZE_SHR;

	bool outOfBounds = any(greaterThanEqual(xyz, WORLD_CHUNKS_XYZ));

    int prevChunk = pos.chunk;
    pos.chunk = outOfBounds ? -1 : int(dot(xyz, CHUNKS_MUL));
    return pos.chunk != prevChunk;
}
bool isAirChunk(uint flags) {
    return (flags & 0xffu)==0;
}
/// Unpacks x,y,z from 2nd,3rd and 4th ubyte of _val_
vec3 getDistanceField(uint val) {
    return unpackUnorm4x8(val).yzw * 255;
}
float getMinDistToEdge(
    Ray ray,
    Position pos,
    uint voxelSize)
{
    vec3 p    = pos.fpos-WORLD_BB[0];
    vec3 rem  = mod(p, voxelSize);
    vec3 size = vec3(greaterThanEqual(ray.direction, vec3(0))) * voxelSize;
    vec3 dist = size-rem;

    vec3 m    = dist * ray.invDirection;
    float res = min(m.x, min(m.y, m.z));
    return max(res, 0);
}
float getMinDistToEdgeOfDistanceField(
    Ray ray,
    Position pos,
    vec3 radius,
    uint sideSize)    // CHUNK_SIZE or NIBBLE_SIZE
{
    // radius = 0 = 1 air chunk  (r=0,    r2=0)
    //        = 1 = 3 air chunks (r=512,  r2=1024)
    //        = 2 = 5 air chunks (r=1024, r2 = 2048)
    //          etc...
    vec3 r    = radius*sideSize;
    vec3 r2   = r*2;
    vec3 p    = pos.fpos-WORLD_BB[0];
    vec3 rem  = mod(p, sideSize) + r;
    vec3 size = vec3(greaterThanEqual(ray.direction, vec3(0))) * (sideSize+r2);
    vec3 dist = size-rem;

    vec3 m    = dist * ray.invDirection;
    float res = min(m.x, min(m.y, m.z));
    return max(res, 0);
}
/// Estimate surface normal of hit position
/// 0 =  1, 0, 0
/// 1 = -1, 0, 0
/// 2 =  0, 1, 0
/// 3 =  0,-1, 0
/// 4 =  0, 0, 1
/// 5 =  0, 0,-1
uint getEstimatedNormal(vec3 hitPos, float voxelSize) {
    vec3 p   = hitPos-WORLD_BB[0];
    vec3 rem = mod(p, voxelSize);
    vec3 dir = rem-(voxelSize/2);

    vec3 a = abs(dir);

    uint b = a.x>=a.y && a.x>=a.z ? (0 + (dir.x<0 ? 1 : 0)) :
             a.y>=a.z ?             (2 + (dir.y<0 ? 1 : 0)) :
                                    (4 + (dir.z<0 ? 1 : 0));
    return b;
}
//void clampPositionToVoxelEntryPoint(Ray ray, inout Position pos, float voxelSize) {
//
//    vec3 dir    = -ray.direction;
//    vec3 invDir = -ray.invDirection;
//
//    vec3 p    = pos.fpos-WORLD_BB[0];
//    vec3 rem  = mod(p, voxelSize);
//    vec3 size = vec3(greaterThanEqual(dir, vec3(0))) * voxelSize;
//    vec3 dist = size-rem;
//
//    vec3 m    = dist * invDir;
//    float res = min(m.x, min(m.y, m.z));
//    float f   = max(res, 0);
//
//    updatePosition(pos, dir*f);
//}
///
/// Skip dist a little bit depending on how near to the camera
/// the ray is. This is necessary in the pathological case
/// where the ray is parallel to and on the edge of a voxel box.
/// Also, a small bump greatly improves speed without compromising
/// quality (much). Adjust these values appropriately depending on the scene.
///
void skipLOD(float distance, inout float dist) {
    float bump = (distance+0.00001)/1500;

    // handle pathological case
    if(dist<0.0001) {
        //dist += clamp(bump, 0.005, 0.5);
        dist += clamp(bump, 0.001, 2.0); // 0.001, 2.0
    } else {
        // skip a bit based on distance to camera
        //dist += clamp(bump, 0.0001, 15);
        /// The higher this value, the less accurate the results
        //dist += clamp(bump, 0.0001, 0.5);

        dist += smoothstep(0.00001, 1.5, bump); // 0.0001, 0.5
    }
}
Voxel march(Ray ray, inout Position pos) {
    Voxel voxel;
    float distance = 0;
    uint voxels    = chunkDataIn[pos.chunk] / 4;
    uint flags     = voxelsIn[voxels];

    // Assume:
    //      1) pos.chunk will always start with a valid chunk

    while(true) {
        float dist;

        if(isAirChunk(flags)) {
            dist = getMinDistToEdgeOfDistanceField(ray, pos, getDistanceField(flags), CHUNK_SIZE);
        } else {

            if(!getAirVoxel(pos, voxel, distance, voxels)) {
                /// We have hit something

                //voxel.normal = getEstimatedNormal(pos.fpos, voxel.size);
                break;
            }

            /// We are inside an air voxel of some size

            bool isCell = (voxel.size == NIBBLE_SIZE);

            if(isCell) {
                uint cell       = voxelsIn[voxels + 1 + voxel.oct];
                vec3 distances  = getDistanceField(cell);
                dist = getMinDistToEdgeOfDistanceField(ray, pos, distances, NIBBLE_SIZE);
            } else {
                dist = getMinDistToEdge(ray, pos, voxel.size);
            }
        }

        skipLOD(distance, dist);

        distance += dist;

        bool chunkChanged = updatePosition(pos, ray.direction*dist);

        if(chunkChanged) {
            if(pos.chunk==-1) {
                /// We ran out of scenery
                voxel.value=0;
                break;
            }
            voxels  = chunkDataIn[pos.chunk] / 4;
            flags   = voxelsIn[voxels];
        }
	}

	voxel.distance = distance;
	return voxel;
}

void main() {
    Ray ray      = generateRay();
    Position pos = Position(uvec3(0), ray.start, -1);
    updatePosition(pos, vec3(0));

    Voxel voxel = march(ray, pos);

    dataOut[g_index] = MarchOut(voxel.distance, (voxel.normal<<16) + (voxel.size<<8) + voxel.value);
}
