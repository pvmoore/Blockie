#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#ifdef VULKAN
    #extension GL_GOOGLE_include_directive : require
#else
    #extension GL_KHR_vulkan_glsl : enable
#endif
/*
    Set by program:

    CHUNK_SIZE          1024
    CHUNK_SIZE_SHR      10
    OctreeTwigSize      12
    OctreeLeafSize      8
    DFIELD_OFFSET       5148
*/

layout(local_size_x = 8, local_size_y = 8) in;

#include "_header.inc"

#define CELL_SIZE (CHUNK_SIZE>>4)  // 64

layout(set = 0, binding = 0, std430) readonly buffer I0 {
    // voxel data in ubytes
	uint voxelsIn[];
};
layout(set = 0, binding = 1, std430) readonly buffer I1 {
    // chunk data in uints
	uint chunkDataIn[];
};
layout(set = 0, binding = 2, std430) writeonly buffer O0 {
	MarchOut dataOut[];
};
//layout(set = 0, binding = 2, rgba32f) uniform writeonly image2D imageOut;

//layout(set = 1, binding = 0, std430) writeonly buffer O0 {
//	uint debugOut[];
//};

#include "_ubo.inc"

ivec2 pixel     = ivec2(gl_GlobalInvocationID.xy);
uint g_index    = gl_GlobalInvocationID.x +
                  gl_GlobalInvocationID.y * ubo_SIZE.x;
vec3 CHUNKS_MUL = vec3(1, ubo_WORLD_CHUNKS_XYZ.x, ubo_WORLD_CHUNKS_XYZ.x * ubo_WORLD_CHUNKS_XYZ.y);

struct Flags {
    uint a;
    uint b;
};
#define CHUNK_FLAG(f)       (f.a & 0xffu)
#define CHUNK_DISTANCE_X(f) (f.a >> 16)
#define CHUNK_DISTANCE_Y(f) (f.b & 0xffffu)
#define CHUNK_DISTANCE_Z(f) (f.b >> 16)

#include "useful_functions.comp"
#include "pass1_march_common.inc"
#include "marchM1.inc"
#include "_camera.inc"

#line 1

bool isAirChunk(Flags flags) {
    return CHUNK_FLAG(flags)==1;
}
uvec3 airChunkDistanceField(Flags flags) {
    return uvec3(CHUNK_DISTANCE_X(flags),
                 CHUNK_DISTANCE_Y(flags),
                 CHUNK_DISTANCE_Z(flags));
}
vec3 airCellDistanceField(uint v) {
    return vec3(v & 31u, (v>>5) & 31u, (v>>10) & 31u);
}

Voxel march(Ray ray, inout Position pos, float maxDistance) {
    Voxel voxel      = Voxel(0,0,0,0);
    float distance   = 0;
    uint voxelsRoot  = chunkDataIn[pos.chunk];
    Flags flags      = Flags(voxelsIn[voxelsRoot/4], voxelsIn[voxelsRoot/4+1]);

    // Assume:
    //      1) pos.chunk will always start with a valid chunk
    //      2) distance will always start < maxDistance

    do{
        float dist;

        if(isAirChunk(flags)) {
            dist = getMinDistToEdge8BitsBiDirectional(ray, pos, airChunkDistanceField(flags), CHUNK_SIZE);
        } else {

            if(!getAirVoxel(pos, voxel, distance, voxelsRoot)) break;

            const bool isRoot = (voxel.size == CELL_SIZE);

            if(isRoot) {
                uint dfield = GETUSHORT(voxelsIn, ((voxelsRoot+DFIELD_OFFSET)>>1) + voxel.oct);
                vec3 distances = airCellDistanceField(dfield);
                dist = getMinDistToEdgeUniDirectional(ray, pos, distances, CELL_SIZE);
            } else {
                dist = getMinDistToEdge(ray, pos, voxel.size);
            }
        }

        skipLOD(distance, dist);

        distance += dist;

        bool chunkChanged = updatePosition(pos, ray.direction*dist);

        if(chunkChanged) {
            if(pos.chunk==-1) break;
            voxelsRoot  = chunkDataIn[pos.chunk];
            flags       = Flags(voxelsIn[voxelsRoot/4], voxelsIn[voxelsRoot/4+1]);
        }
	}while(distance<maxDistance);

	voxel.distance = distance;
	return voxel;
}

void main() {
    const Ray ray = generateRay();

    Position pos = Position(uvec3(0), ray.start, -1);
    updatePosition(pos, vec3(0));

    Voxel voxel = march(ray, pos, MAX_DISTANCE);

    //dataOut[g_index] = MarchOut(voxel.distance, (voxel.size<<8) + voxel.value);
    dataOut[g_index] = MarchOut(voxel.distance, voxel.value);
}
