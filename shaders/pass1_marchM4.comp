#version 450 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#ifdef VULKAN
    #extension GL_GOOGLE_include_directive : require
#else
    #extension GL_KHR_vulkan_glsl : enable
#endif
/*
    Set by program:

    CHUNK_SIZE          1024
    CHUNK_SIZE_SHR      10
    OctreeTwigSize      12
    OctreeLeafSize      8
    DFIELD_OFFSET       5148
*/

layout(local_size_x = 8, local_size_y = 8) in;

#include "_header.inc"

layout(set = 0, binding = 0, std430) readonly buffer I0 {
    // voxel data in ubytes
	uint voxelsIn[];
};
layout(set = 0, binding = 1, std430) readonly buffer I1 {
    // chunk data in uints
	uint chunkDataIn[];
};
layout(set = 0, binding = 2, std430) writeonly buffer O0 {
	MarchOut dataOut[];
};
//layout(set = 0, binding = 2, rgba32f) uniform writeonly image2D imageOut;

//layout(set = 1, binding = 0, std430) writeonly buffer O0 {
//	uint debugOut[];
//};

#include "_ubo.inc"

ivec2 pixel     = ivec2(gl_GlobalInvocationID.xy);
uint g_index    = gl_GlobalInvocationID.x +
                  gl_GlobalInvocationID.y * ubo_SIZE.x;
vec3 CHUNKS_MUL = vec3(1, ubo_WORLD_CHUNKS_XYZ.x, ubo_WORLD_CHUNKS_XYZ.x * ubo_WORLD_CHUNKS_XYZ.y);

struct Flags {
    uint a;
    uint b;
};
#define CHUNK_FLAG(f)       (f.a & 0xffu)
#define CHUNK_DISTANCE_X(f) (f.a >> 16)
#define CHUNK_DISTANCE_Y(f) (f.b & 0xffffu)
#define CHUNK_DISTANCE_Z(f) (f.b >> 16)

#include "useful_functions.comp"
#include "pass1_march_common.inc"
#include "marchM4.inc"
#include "_camera.inc"

#line 1

bool isAirChunk(Flags flags) {
    return CHUNK_FLAG(flags)==0;
}
uvec3 getChunkDistanceField(Flags f) {
    return uvec3(CHUNK_DISTANCE_X(f),
                 CHUNK_DISTANCE_Y(f),
                 CHUNK_DISTANCE_Z(f));
}
//
// Directional distance field stored in radius
//
float getMinDistToEdgeOfCellDistanceField(
    Ray ray,
    Position pos,
    uvec3 up,
    uvec3 down,
    float CELL_SIZE)
{
    vec3 p    = pos.fpos-ubo_WORLD_BB_MIN;
    vec3 rem  = mod(p, CELL_SIZE) + down*CELL_SIZE;
    vec3 size = vec3(greaterThanEqual(ray.direction, vec3(0))) * ((1+up+down)*CELL_SIZE);
    vec3 dist = size-rem;

    vec3 m    = dist * ray.invDirection;
    float res = min(m.x, min(m.y, m.z));
    return max(res, 0);
}

Voxel march(Ray ray, inout Position pos) {
    Voxel voxel    = Voxel(0,0,0,0);
    float distance = 0;
    uint voxels    = chunkDataIn[pos.chunk] / 4;
    Flags flags    = Flags(voxelsIn[voxels], voxelsIn[voxels+1]);

    #define CELL_DISTANCES_LEN (32768*4)

    L100_BITS_LEN       = voxelsIn[voxels+(L100BITS_LEN_OFFSET/4)];
    NUM_UNIQ_BRANCHES   = voxelsIn[voxels+(NUM_UNIQ_BRANCHES_OFFSET/4)];

    L100PopcountsOffset = (L100_BITS_OFFSET + L100_BITS_LEN) / 4;
    uniqBranchesOffset  = L100PopcountsOffset + L100_BITS_LEN/4;
    cellDistancesOffset = uniqBranchesOffset + (NUM_UNIQ_BRANCHES*8/4);
    branchPtrsOffset    = cellDistancesOffset + CELL_DISTANCES_LEN/4;
    bitsPerBranch       = bitsRequiredToEncode(NUM_UNIQ_BRANCHES);

    // Assume:
    //      1) pos.chunk will always start with a valid chunk

    while(true) {
        float dist;

        if(isAirChunk(flags)) {
            dist = getMinDistToEdge8BitsBiDirectional(ray, pos, getChunkDistanceField(flags), CHUNK_SIZE);
        } else {

            //uint cell = getOctet_n_n(pos.upos, 8, 2);  // 2
            //uint cell = getOctet_n_n(pos.upos, 7, 3);  // 3
            //uint cell = getOctet_n_n(pos.upos, 6, 4);  // 4
            uint cell = getOctet_n_n(pos.upos, 5, 5); // 5

            if(isBitZero(cell, voxels + BITS_L5/4)) {

                uint v      = voxelsIn[voxels + cellDistancesOffset + cell];
                uvec3 up = uvec3(
                    ((v>>5)&31u),
                    ((v>>15)&31u),
                    ((v>>25)&31u)
                );
                uvec3 down = uvec3(
                    (v & 31u) ,
                    ((v>>10)&31u),
                    ((v>>20)&31u)
                );

                dist = getMinDistToEdgeOfCellDistanceField(ray, pos, up, down, 32);
            } else {

                uint size = getAirVoxel(pos, voxels);

                if(size==0) {
                    /// We have hit something
                    voxel.value = 1;
                    break;
                }

                /// We are inside an air voxel of some size
                dist = getMinDistToEdge(ray, pos, size);
            }
        }

        skipLOD(distance, dist);

        distance += dist;

        bool chunkChanged = updatePosition(pos, ray.direction*dist);

        if(chunkChanged) {
            if(pos.chunk==-1) {
                /// We ran out of scenery
                voxel.value = 0;
                break;
            }
            voxels = chunkDataIn[pos.chunk] / 4;
            flags  = Flags(voxelsIn[voxels], voxelsIn[voxels+1]);

            L100_BITS_LEN       = voxelsIn[voxels+(L100BITS_LEN_OFFSET/4)];
            NUM_UNIQ_BRANCHES   = voxelsIn[voxels+(NUM_UNIQ_BRANCHES_OFFSET/4)];

            L100PopcountsOffset = (L100_BITS_OFFSET + L100_BITS_LEN) / 4;
            uniqBranchesOffset  = L100PopcountsOffset + L100_BITS_LEN/4;
            cellDistancesOffset = uniqBranchesOffset + (NUM_UNIQ_BRANCHES*8/4);
            branchPtrsOffset    = cellDistancesOffset + CELL_DISTANCES_LEN/4;
            bitsPerBranch       = bitsRequiredToEncode(NUM_UNIQ_BRANCHES);
        }
	}

	voxel.distance = distance;
	return voxel;
}

void main() {
    Ray ray      = generateRay();
    Position pos = Position(uvec3(0), ray.start, -1);
    updatePosition(pos, vec3(0));

    Voxel voxel = march(ray, pos);

    dataOut[g_index] = MarchOut(voxel.distance, //(voxel.normal<<16) + (voxel.size<<8) +
                                voxel.value);
}
